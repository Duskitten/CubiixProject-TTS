[gd_resource type="Shader" format=3 uid="uid://qw8xxswsw5c8"]

[resource]
code = "// NOTE: Shader automatically converted from Revel Engine 4.2.beta's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_disabled, diffuse_lambert;

uniform bool has_metallic = false;
uniform bool has_alpha = false;

uniform sampler2D texture_albedo : source_color, filter_nearest, repeat_enable;
uniform vec4 Body1 : source_color;
uniform vec4 emiss_Body1 : source_color;
uniform float Body1_metallic = 1.0;
uniform float Body1_roughness = 1.0;
uniform float Body1_alpha = 1.0;

uniform vec4 Body2 : source_color;
uniform vec4 emiss_Body2 : source_color;
uniform float Body2_metallic = 1.0;
uniform float Body2_roughness = 1.0;
uniform float Body2_alpha = 1.0;

uniform vec4 Body3 : source_color;
uniform vec4 emiss_Body3 : source_color;
uniform float Body3_metallic = 1.0;
uniform float Body3_roughness = 1.0;
uniform float Body3_alpha = 1.0;

uniform vec4 Body4 : source_color;
uniform vec4 emiss_Body4 : source_color;
uniform float Body4_metallic = 1.0;
uniform float Body4_roughness = 1.0;
uniform float Body4_alpha = 1.0;


uniform float distance_fade_min : hint_range(-4096.0, 4096.0, 0.01);
uniform float distance_fade_max : hint_range(-4096.0, 4096.0, 0.01);
uniform float distance_fade_glow : hint_range(0.0, 4096.0, 0.01);
uniform bool distance_transitioning;
void fragment() {
	vec4 albedo_tex = texture(texture_albedo, UV);
	if (int(albedo_tex.r) != int(1.0) && int(albedo_tex.g) != int(1.0)){
		ALBEDO = Body2.rgb;
		if (!distance_transitioning){
			EMISSION = emiss_Body2.rgb;
			}else{
			EMISSION = vec3(distance_fade_glow,distance_fade_glow,distance_fade_glow);
		}
		if (has_metallic){
			ROUGHNESS = Body2_roughness;
			METALLIC = Body2_metallic;
			}
			if (has_alpha){
			ALPHA = Body2_alpha;
		}
		}
		
	else if (int(albedo_tex.r) == int(1.0) && int(albedo_tex.g) != int(1.0)){

		ALBEDO = Body1.rgb;
		if (!distance_transitioning){
			EMISSION = emiss_Body1.rgb;
			}else{
			EMISSION = vec3(distance_fade_glow,distance_fade_glow,distance_fade_glow);

		}
		if (has_metallic){
				ROUGHNESS = Body1_roughness;
				METALLIC = Body1_metallic;
			}
			if (has_alpha){
			ALPHA = Body1_alpha;
		}
		}
		
		
	else if (int(albedo_tex.g) == int(1.0) && int(albedo_tex.r) != int(1.0)){
		ALBEDO = Body3.rgb;
		if (!distance_transitioning){
			EMISSION = emiss_Body3.rgb;
			}else{
			EMISSION = vec3(distance_fade_glow,distance_fade_glow,distance_fade_glow);

		}
		if (has_metallic){
				ROUGHNESS = Body3_roughness;
				METALLIC = Body3_metallic;
			}
			if (has_alpha){
			ALPHA = Body3_alpha;
		}
		}
		
	else{
		ALBEDO = Body4.rgb;
		if (!distance_transitioning){
		EMISSION = emiss_Body4.rgb;
		}else{
			EMISSION = vec3(distance_fade_glow,distance_fade_glow,distance_fade_glow);
		}
		if (has_metallic){
				ROUGHNESS = Body4_roughness;
				METALLIC = Body4_metallic;
			}
			if (has_alpha){
			ALPHA = Body4_alpha;
		}
		}
	
	{
		// Distance Fade: Pixel Dither
		float fade_distance = length(VERTEX);

		// Use interleaved gradient noise, which is fast but still looks good.
		const vec3 magic = vec3(0.06711056, 0.00583715, 52.9829189);
		float fade = clamp(smoothstep(distance_fade_min, distance_fade_max, fade_distance), 0.0, 1.0);
		// Use a hard cap to prevent a few stray pixels from remaining when past the fade-out distance.
		if (fade < 0.001 || fade < fract(magic.z * fract(dot(FRAGCOORD.xy, magic.xy)))) {
			discard;
		}
	}
}
"
